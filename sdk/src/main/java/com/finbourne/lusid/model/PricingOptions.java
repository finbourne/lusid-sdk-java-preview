/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ModelSelection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Options for controlling the default aspects and behaviour of the pricing engine.
 */
@ApiModel(description = "Options for controlling the default aspects and behaviour of the pricing engine.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PricingOptions {
  public static final String SERIALIZED_NAME_MODEL_SELECTION = "modelSelection";
  @SerializedName(SERIALIZED_NAME_MODEL_SELECTION)
  private ModelSelection modelSelection;

  public static final String SERIALIZED_NAME_USE_INSTRUMENT_TYPE_TO_DETERMINE_PRICER = "useInstrumentTypeToDeterminePricer";
  @SerializedName(SERIALIZED_NAME_USE_INSTRUMENT_TYPE_TO_DETERMINE_PRICER)
  private Boolean useInstrumentTypeToDeterminePricer;

  public static final String SERIALIZED_NAME_ALLOW_ANY_INSTRUMENTS_WITH_SEC_UID_TO_PRICE_OFF_LOOKUP = "allowAnyInstrumentsWithSecUidToPriceOffLookup";
  @SerializedName(SERIALIZED_NAME_ALLOW_ANY_INSTRUMENTS_WITH_SEC_UID_TO_PRICE_OFF_LOOKUP)
  private Boolean allowAnyInstrumentsWithSecUidToPriceOffLookup;

  public static final String SERIALIZED_NAME_ALLOW_PARTIALLY_SUCCESSFUL_EVALUATION = "allowPartiallySuccessfulEvaluation";
  @SerializedName(SERIALIZED_NAME_ALLOW_PARTIALLY_SUCCESSFUL_EVALUATION)
  private Boolean allowPartiallySuccessfulEvaluation;

  public static final String SERIALIZED_NAME_PRODUCE_SEPARATE_RESULT_FOR_LINEAR_OTC_LEGS = "produceSeparateResultForLinearOtcLegs";
  @SerializedName(SERIALIZED_NAME_PRODUCE_SEPARATE_RESULT_FOR_LINEAR_OTC_LEGS)
  private Boolean produceSeparateResultForLinearOtcLegs;

  public static final String SERIALIZED_NAME_ENABLE_USE_OF_CACHED_UNIT_RESULTS = "enableUseOfCachedUnitResults";
  @SerializedName(SERIALIZED_NAME_ENABLE_USE_OF_CACHED_UNIT_RESULTS)
  private Boolean enableUseOfCachedUnitResults;

  public static final String SERIALIZED_NAME_WINDOW_VALUATION_ON_INSTRUMENT_START_END = "windowValuationOnInstrumentStartEnd";
  @SerializedName(SERIALIZED_NAME_WINDOW_VALUATION_ON_INSTRUMENT_START_END)
  private Boolean windowValuationOnInstrumentStartEnd;

  public static final String SERIALIZED_NAME_REMOVE_CONTINGENT_CASHFLOWS_IN_PAYMENT_DIARY = "removeContingentCashflowsInPaymentDiary";
  @SerializedName(SERIALIZED_NAME_REMOVE_CONTINGENT_CASHFLOWS_IN_PAYMENT_DIARY)
  private Boolean removeContingentCashflowsInPaymentDiary;

  public static final String SERIALIZED_NAME_USE_CHILD_SUB_HOLDING_KEYS_FOR_PORTFOLIO_EXPANSION = "useChildSubHoldingKeysForPortfolioExpansion";
  @SerializedName(SERIALIZED_NAME_USE_CHILD_SUB_HOLDING_KEYS_FOR_PORTFOLIO_EXPANSION)
  private Boolean useChildSubHoldingKeysForPortfolioExpansion;


  public PricingOptions modelSelection(ModelSelection modelSelection) {
    this.modelSelection = modelSelection; 
    return this;
  }

   /**
   * Get modelSelection
   * @return modelSelection
  **/
  @ApiModelProperty(value = "")
  public ModelSelection getModelSelection() {
    return modelSelection;
  }

  public void setModelSelection(ModelSelection modelSelection) {
    this.modelSelection = modelSelection;
  }


  public PricingOptions useInstrumentTypeToDeterminePricer(Boolean useInstrumentTypeToDeterminePricer) {
    this.useInstrumentTypeToDeterminePricer = useInstrumentTypeToDeterminePricer; 
    return this;
  }

   /**
   * If true then use the instrument type to set the default instrument pricer  This applies where no more specific set of overrides are provided on a per-vendor and instrument basis.
   * @return useInstrumentTypeToDeterminePricer
  **/
  @ApiModelProperty(value = "If true then use the instrument type to set the default instrument pricer  This applies where no more specific set of overrides are provided on a per-vendor and instrument basis.")
  public Boolean getUseInstrumentTypeToDeterminePricer() {
    return useInstrumentTypeToDeterminePricer;
  }

  public void setUseInstrumentTypeToDeterminePricer(Boolean useInstrumentTypeToDeterminePricer) {
    this.useInstrumentTypeToDeterminePricer = useInstrumentTypeToDeterminePricer;
  }


  public PricingOptions allowAnyInstrumentsWithSecUidToPriceOffLookup(Boolean allowAnyInstrumentsWithSecUidToPriceOffLookup) {
    this.allowAnyInstrumentsWithSecUidToPriceOffLookup = allowAnyInstrumentsWithSecUidToPriceOffLookup; 
    return this;
  }

   /**
   * By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated  instrument definition simply through looking up a price as there should be a better way of evaluating it.  To override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true.
   * @return allowAnyInstrumentsWithSecUidToPriceOffLookup
  **/
  @ApiModelProperty(value = "By default, one would not expect to price and exotic instrument, i.e. an instrument with a complicated  instrument definition simply through looking up a price as there should be a better way of evaluating it.  To override that behaviour and allow lookup for a price from the instrument identifier(s), set this to true.")
  public Boolean getAllowAnyInstrumentsWithSecUidToPriceOffLookup() {
    return allowAnyInstrumentsWithSecUidToPriceOffLookup;
  }

  public void setAllowAnyInstrumentsWithSecUidToPriceOffLookup(Boolean allowAnyInstrumentsWithSecUidToPriceOffLookup) {
    this.allowAnyInstrumentsWithSecUidToPriceOffLookup = allowAnyInstrumentsWithSecUidToPriceOffLookup;
  }


  public PricingOptions allowPartiallySuccessfulEvaluation(Boolean allowPartiallySuccessfulEvaluation) {
    this.allowPartiallySuccessfulEvaluation = allowPartiallySuccessfulEvaluation; 
    return this;
  }

   /**
   * If true then a failure in task evaluation doesn&#39;t cause overall failure.  results will be returned where they succeeded and annotation elsewhere
   * @return allowPartiallySuccessfulEvaluation
  **/
  @ApiModelProperty(value = "If true then a failure in task evaluation doesn't cause overall failure.  results will be returned where they succeeded and annotation elsewhere")
  public Boolean getAllowPartiallySuccessfulEvaluation() {
    return allowPartiallySuccessfulEvaluation;
  }

  public void setAllowPartiallySuccessfulEvaluation(Boolean allowPartiallySuccessfulEvaluation) {
    this.allowPartiallySuccessfulEvaluation = allowPartiallySuccessfulEvaluation;
  }


  public PricingOptions produceSeparateResultForLinearOtcLegs(Boolean produceSeparateResultForLinearOtcLegs) {
    this.produceSeparateResultForLinearOtcLegs = produceSeparateResultForLinearOtcLegs; 
    return this;
  }

   /**
   * If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg  rather than a single line result with the amalgamated/summed pv from both legs.
   * @return produceSeparateResultForLinearOtcLegs
  **/
  @ApiModelProperty(value = "If true (default), when pricing an Fx-Forward or Interest Rate Swap, Future and other linearly separable products, product two results, one for each leg  rather than a single line result with the amalgamated/summed pv from both legs.")
  public Boolean getProduceSeparateResultForLinearOtcLegs() {
    return produceSeparateResultForLinearOtcLegs;
  }

  public void setProduceSeparateResultForLinearOtcLegs(Boolean produceSeparateResultForLinearOtcLegs) {
    this.produceSeparateResultForLinearOtcLegs = produceSeparateResultForLinearOtcLegs;
  }


  public PricingOptions enableUseOfCachedUnitResults(Boolean enableUseOfCachedUnitResults) {
    this.enableUseOfCachedUnitResults = enableUseOfCachedUnitResults; 
    return this;
  }

   /**
   * If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.  Default is that this caching is turned off.
   * @return enableUseOfCachedUnitResults
  **/
  @ApiModelProperty(value = "If true, when pricing using a model or for an instrument that supports use of intermediate cached-results, use them.  Default is that this caching is turned off.")
  public Boolean getEnableUseOfCachedUnitResults() {
    return enableUseOfCachedUnitResults;
  }

  public void setEnableUseOfCachedUnitResults(Boolean enableUseOfCachedUnitResults) {
    this.enableUseOfCachedUnitResults = enableUseOfCachedUnitResults;
  }


  public PricingOptions windowValuationOnInstrumentStartEnd(Boolean windowValuationOnInstrumentStartEnd) {
    this.windowValuationOnInstrumentStartEnd = windowValuationOnInstrumentStartEnd; 
    return this;
  }

   /**
   * If true, when valuing an instrument outside the period where it is &#39;alive&#39; (the start-maturity window) it will return a valuation of zero
   * @return windowValuationOnInstrumentStartEnd
  **/
  @ApiModelProperty(value = "If true, when valuing an instrument outside the period where it is 'alive' (the start-maturity window) it will return a valuation of zero")
  public Boolean getWindowValuationOnInstrumentStartEnd() {
    return windowValuationOnInstrumentStartEnd;
  }

  public void setWindowValuationOnInstrumentStartEnd(Boolean windowValuationOnInstrumentStartEnd) {
    this.windowValuationOnInstrumentStartEnd = windowValuationOnInstrumentStartEnd;
  }


  public PricingOptions removeContingentCashflowsInPaymentDiary(Boolean removeContingentCashflowsInPaymentDiary) {
    this.removeContingentCashflowsInPaymentDiary = removeContingentCashflowsInPaymentDiary; 
    return this;
  }

   /**
   * When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.  i.e. Is exercise or default being assumed to happen or not.
   * @return removeContingentCashflowsInPaymentDiary
  **/
  @ApiModelProperty(value = "When creating a payment diary, should contingent cash payments (e.g. from exercise of a swaption into a swap) be included or not.  i.e. Is exercise or default being assumed to happen or not.")
  public Boolean getRemoveContingentCashflowsInPaymentDiary() {
    return removeContingentCashflowsInPaymentDiary;
  }

  public void setRemoveContingentCashflowsInPaymentDiary(Boolean removeContingentCashflowsInPaymentDiary) {
    this.removeContingentCashflowsInPaymentDiary = removeContingentCashflowsInPaymentDiary;
  }


  public PricingOptions useChildSubHoldingKeysForPortfolioExpansion(Boolean useChildSubHoldingKeysForPortfolioExpansion) {
    this.useChildSubHoldingKeysForPortfolioExpansion = useChildSubHoldingKeysForPortfolioExpansion; 
    return this;
  }

   /**
   * Should fund constituents inherit subholding keys from the parent subholding keyb
   * @return useChildSubHoldingKeysForPortfolioExpansion
  **/
  @ApiModelProperty(value = "Should fund constituents inherit subholding keys from the parent subholding keyb")
  public Boolean getUseChildSubHoldingKeysForPortfolioExpansion() {
    return useChildSubHoldingKeysForPortfolioExpansion;
  }

  public void setUseChildSubHoldingKeysForPortfolioExpansion(Boolean useChildSubHoldingKeysForPortfolioExpansion) {
    this.useChildSubHoldingKeysForPortfolioExpansion = useChildSubHoldingKeysForPortfolioExpansion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingOptions {\n");
    sb.append("    modelSelection: ").append(toIndentedString(modelSelection)).append("\n");
    sb.append("    useInstrumentTypeToDeterminePricer: ").append(toIndentedString(useInstrumentTypeToDeterminePricer)).append("\n");
    sb.append("    allowAnyInstrumentsWithSecUidToPriceOffLookup: ").append(toIndentedString(allowAnyInstrumentsWithSecUidToPriceOffLookup)).append("\n");
    sb.append("    allowPartiallySuccessfulEvaluation: ").append(toIndentedString(allowPartiallySuccessfulEvaluation)).append("\n");
    sb.append("    produceSeparateResultForLinearOtcLegs: ").append(toIndentedString(produceSeparateResultForLinearOtcLegs)).append("\n");
    sb.append("    enableUseOfCachedUnitResults: ").append(toIndentedString(enableUseOfCachedUnitResults)).append("\n");
    sb.append("    windowValuationOnInstrumentStartEnd: ").append(toIndentedString(windowValuationOnInstrumentStartEnd)).append("\n");
    sb.append("    removeContingentCashflowsInPaymentDiary: ").append(toIndentedString(removeContingentCashflowsInPaymentDiary)).append("\n");
    sb.append("    useChildSubHoldingKeysForPortfolioExpansion: ").append(toIndentedString(useChildSubHoldingKeysForPortfolioExpansion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
