/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon.
 */
@ApiModel(description = "Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ValuationSchedule {
  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private String effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_AT = "effectiveAt";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_AT)
  private String effectiveAt;

  public static final String SERIALIZED_NAME_TENOR = "tenor";
  @SerializedName(SERIALIZED_NAME_TENOR)
  private String tenor;

  public static final String SERIALIZED_NAME_ROLL_CONVENTION = "rollConvention";
  @SerializedName(SERIALIZED_NAME_ROLL_CONVENTION)
  private String rollConvention;

  public static final String SERIALIZED_NAME_HOLIDAY_CALENDARS = "holidayCalendars";
  @SerializedName(SERIALIZED_NAME_HOLIDAY_CALENDARS)
  private List<String> holidayCalendars = null;

  public static final String SERIALIZED_NAME_VALUATION_DATE_TIMES = "valuationDateTimes";
  @SerializedName(SERIALIZED_NAME_VALUATION_DATE_TIMES)
  private List<String> valuationDateTimes = null;


  public ValuationSchedule effectiveFrom(String effectiveFrom) {
    this.effectiveFrom = effectiveFrom; 
    return this;
  }

   /**
   * If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range.
   * @return effectiveFrom
  **/
  @ApiModelProperty(value = "If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range.")
  public String getEffectiveFrom() {
    return effectiveFrom;
  }

  public void setEffectiveFrom(String effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public ValuationSchedule effectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt; 
    return this;
  }

   /**
   * The market data time, i.e. the time to run the valuation request effective of.
   * @return effectiveAt
  **/
  @ApiModelProperty(required = true, value = "The market data time, i.e. the time to run the valuation request effective of.")
  public String getEffectiveAt() {
    return effectiveAt;
  }

  public void setEffectiveAt(String effectiveAt) {
    this.effectiveAt = effectiveAt;
  }


  public ValuationSchedule tenor(String tenor) {
    this.tenor = tenor; 
    return this;
  }

   /**
   * Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.
   * @return tenor
  **/
  @ApiModelProperty(value = "Tenor, e.g \"1D\", \"1M\" to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.")
  public String getTenor() {
    return tenor;
  }

  public void setTenor(String tenor) {
    this.tenor = tenor;
  }


  public ValuationSchedule rollConvention(String rollConvention) {
    this.rollConvention = rollConvention; 
    return this;
  }

   /**
   * When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.
   * @return rollConvention
  **/
  @ApiModelProperty(value = "When Tenor is given and is not equal to \"1D\", there may be cases where \"date + tenor\" land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \"MF\" would be applied to determine the next GBD.")
  public String getRollConvention() {
    return rollConvention;
  }

  public void setRollConvention(String rollConvention) {
    this.rollConvention = rollConvention;
  }


  public ValuationSchedule holidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars; 
    return this;
  }

  public ValuationSchedule addHolidayCalendarsItem(String holidayCalendarsItem) {
   
    if (this.holidayCalendars == null) {
      this.holidayCalendars = new ArrayList<>();
    }
    this.holidayCalendars.add(holidayCalendarsItem);
    return this;
  }

   /**
   * The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClarke\&quot;.   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
   * @return holidayCalendars
  **/
  @ApiModelProperty(value = "The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \"CoppClarke\".   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.")
  public List<String> getHolidayCalendars() {
    return holidayCalendars;
  }

  public void setHolidayCalendars(List<String> holidayCalendars) {
    this.holidayCalendars = holidayCalendars;
  }


  public ValuationSchedule valuationDateTimes(List<String> valuationDateTimes) {
    this.valuationDateTimes = valuationDateTimes; 
    return this;
  }

  public ValuationSchedule addValuationDateTimesItem(String valuationDateTimesItem) {
   
    if (this.valuationDateTimes == null) {
      this.valuationDateTimes = new ArrayList<>();
    }
    this.valuationDateTimes.add(valuationDateTimesItem);
    return this;
  }

   /**
   * If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.
   * @return valuationDateTimes
  **/
  @ApiModelProperty(value = "If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.")
  public List<String> getValuationDateTimes() {
    return valuationDateTimes;
  }

  public void setValuationDateTimes(List<String> valuationDateTimes) {
    this.valuationDateTimes = valuationDateTimes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValuationSchedule {\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveAt: ").append(toIndentedString(effectiveAt)).append("\n");
    sb.append("    tenor: ").append(toIndentedString(tenor)).append("\n");
    sb.append("    rollConvention: ").append(toIndentedString(rollConvention)).append("\n");
    sb.append("    holidayCalendars: ").append(toIndentedString(holidayCalendars)).append("\n");
    sb.append("    valuationDateTimes: ").append(toIndentedString(valuationDateTimes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
