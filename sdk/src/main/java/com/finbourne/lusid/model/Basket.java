/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.BasketAllOf;
import com.finbourne.lusid.model.BasketIdentifier;
import com.finbourne.lusid.model.LusidInstrument;
import com.finbourne.lusid.model.WeightedInstruments;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Class that models a basket of risky instruments that can default.  Upon default, the weight of a defaulting instrument can (will) change and this then affects the behaviour of the basket.
 */
@ApiModel(description = "Class that models a basket of risky instruments that can default.  Upon default, the weight of a defaulting instrument can (will) change and this then affects the behaviour of the basket.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Basket extends LusidInstrument {
  public static final String SERIALIZED_NAME_BASKET_NAME = "basketName";
  @SerializedName(SERIALIZED_NAME_BASKET_NAME)
  private BasketIdentifier basketName;

  public static final String SERIALIZED_NAME_BASKET_TYPE = "basketType";
  @SerializedName(SERIALIZED_NAME_BASKET_TYPE)
  private String basketType;

  public static final String SERIALIZED_NAME_WEIGHTED_INSTRUMENTS = "weightedInstruments";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_INSTRUMENTS)
  private WeightedInstruments weightedInstruments;

  public Basket() {
    //this.instrumentType = this.getClass().getSimpleName();
  }

  public Basket basketName(BasketIdentifier basketName) {
    this.basketName = basketName; 
    return this;
  }

   /**
   * Get basketName
   * @return basketName
  **/
  @ApiModelProperty(required = true, value = "")
  public BasketIdentifier getBasketName() {
    return basketName;
  }

  public void setBasketName(BasketIdentifier basketName) {
    this.basketName = basketName;
  }


  public Basket basketType(String basketType) {
    this.basketType = basketType; 
    return this;
  }

   /**
   * What contents does the basket have. The validation will check that the instrument types contained match those expected.  Supported string (enumeration) values are: [Bonds, Credits, Equities, EquitySwap].
   * @return basketType
  **/
  @ApiModelProperty(required = true, value = "What contents does the basket have. The validation will check that the instrument types contained match those expected.  Supported string (enumeration) values are: [Bonds, Credits, Equities, EquitySwap].")
  public String getBasketType() {
    return basketType;
  }

  public void setBasketType(String basketType) {
    this.basketType = basketType;
  }


  public Basket weightedInstruments(WeightedInstruments weightedInstruments) {
    this.weightedInstruments = weightedInstruments; 
    return this;
  }

   /**
   * Get weightedInstruments
   * @return weightedInstruments
  **/
  @ApiModelProperty(required = true, value = "")
  public WeightedInstruments getWeightedInstruments() {
    return weightedInstruments;
  }

  public void setWeightedInstruments(WeightedInstruments weightedInstruments) {
    this.weightedInstruments = weightedInstruments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Basket {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    basketName: ").append(toIndentedString(basketName)).append("\n");
    sb.append("    basketType: ").append(toIndentedString(basketType)).append("\n");
    sb.append("    weightedInstruments: ").append(toIndentedString(weightedInstruments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
