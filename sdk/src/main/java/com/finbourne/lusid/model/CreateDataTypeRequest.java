/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CreateUnitDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CreateDataTypeRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateDataTypeRequest {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * Indicates the range of data acceptable by a data type. The available values are: Open, Closed
   */
  @JsonAdapter(TypeValueRangeEnum.Adapter.class)
  public enum TypeValueRangeEnum {
    OPEN("Open"),
    
    CLOSED("Closed");

    private String value;

    TypeValueRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeValueRangeEnum fromValue(String value) {
      for (TypeValueRangeEnum b : TypeValueRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeValueRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeValueRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeValueRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeValueRangeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE_VALUE_RANGE = "typeValueRange";
  @SerializedName(SERIALIZED_NAME_TYPE_VALUE_RANGE)
  private TypeValueRangeEnum typeValueRange;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    STRING("String"),
    
    INT("Int"),
    
    DECIMAL("Decimal"),
    
    DATETIME("DateTime"),
    
    BOOLEAN("Boolean"),
    
    MAP("Map"),
    
    LIST("List"),
    
    PROPERTYARRAY("PropertyArray"),
    
    PERCENTAGE("Percentage"),
    
    CODE("Code"),
    
    ID("Id"),
    
    URI("Uri"),
    
    CURRENCYANDAMOUNT("CurrencyAndAmount"),
    
    TRADEPRICE("TradePrice"),
    
    CURRENCY("Currency"),
    
    METRICVALUE("MetricValue"),
    
    RESOURCEID("ResourceId"),
    
    RESULTVALUE("ResultValue"),
    
    CUTLOCALTIME("CutLocalTime"),
    
    DATEORCUTLABEL("DateOrCutLabel");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String value) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ValueTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private ValueTypeEnum valueType;

  public static final String SERIALIZED_NAME_ACCEPTABLE_VALUES = "acceptableValues";
  @SerializedName(SERIALIZED_NAME_ACCEPTABLE_VALUES)
  private List<String> acceptableValues = null;

  /**
   * The schema of the data type&#39;s units. The available values are: NoUnits, Basic, Iso4217Currency
   */
  @JsonAdapter(UnitSchemaEnum.Adapter.class)
  public enum UnitSchemaEnum {
    NOUNITS("NoUnits"),
    
    BASIC("Basic"),
    
    ISO4217CURRENCY("Iso4217Currency");

    private String value;

    UnitSchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitSchemaEnum fromValue(String value) {
      for (UnitSchemaEnum b : UnitSchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitSchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitSchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitSchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitSchemaEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT_SCHEMA = "unitSchema";
  @SerializedName(SERIALIZED_NAME_UNIT_SCHEMA)
  private UnitSchemaEnum unitSchema;

  public static final String SERIALIZED_NAME_ACCEPTABLE_UNITS = "acceptableUnits";
  @SerializedName(SERIALIZED_NAME_ACCEPTABLE_UNITS)
  private List<CreateUnitDefinition> acceptableUnits = null;


  public CreateDataTypeRequest scope(String scope) {
    this.scope = scope; 
    return this;
  }

   /**
   * The scope that the data type will be created in.
   * @return scope
  **/
  @ApiModelProperty(required = true, value = "The scope that the data type will be created in.")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public CreateDataTypeRequest code(String code) {
    this.code = code; 
    return this;
  }

   /**
   * The code of the data type. Together with the scope this uniquely defines the data type.
   * @return code
  **/
  @ApiModelProperty(required = true, value = "The code of the data type. Together with the scope this uniquely defines the data type.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CreateDataTypeRequest typeValueRange(TypeValueRangeEnum typeValueRange) {
    this.typeValueRange = typeValueRange; 
    return this;
  }

   /**
   * Indicates the range of data acceptable by a data type. The available values are: Open, Closed
   * @return typeValueRange
  **/
  @ApiModelProperty(required = true, value = "Indicates the range of data acceptable by a data type. The available values are: Open, Closed")
  public TypeValueRangeEnum getTypeValueRange() {
    return typeValueRange;
  }

  public void setTypeValueRange(TypeValueRangeEnum typeValueRange) {
    this.typeValueRange = typeValueRange;
  }


  public CreateDataTypeRequest displayName(String displayName) {
    this.displayName = displayName; 
    return this;
  }

   /**
   * The display name of the data type.
   * @return displayName
  **/
  @ApiModelProperty(required = true, value = "The display name of the data type.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CreateDataTypeRequest description(String description) {
    this.description = description; 
    return this;
  }

   /**
   * The description of the data type.
   * @return description
  **/
  @ApiModelProperty(required = true, value = "The description of the data type.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateDataTypeRequest valueType(ValueTypeEnum valueType) {
    this.valueType = valueType; 
    return this;
  }

   /**
   * The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel
   * @return valueType
  **/
  @ApiModelProperty(required = true, value = "The expected type of the values. The available values are: String, Int, Decimal, DateTime, Boolean, Map, List, PropertyArray, Percentage, Code, Id, Uri, CurrencyAndAmount, TradePrice, Currency, MetricValue, ResourceId, ResultValue, CutLocalTime, DateOrCutLabel")
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  public CreateDataTypeRequest acceptableValues(List<String> acceptableValues) {
    this.acceptableValues = acceptableValues; 
    return this;
  }

  public CreateDataTypeRequest addAcceptableValuesItem(String acceptableValuesItem) {
   
    if (this.acceptableValues == null) {
      this.acceptableValues = new ArrayList<>();
    }
    this.acceptableValues.add(acceptableValuesItem);
    return this;
  }

   /**
   * The acceptable set of values for this data type. Only applies to &#39;open&#39; value type range.
   * @return acceptableValues
  **/
  @ApiModelProperty(value = "The acceptable set of values for this data type. Only applies to 'open' value type range.")
  public List<String> getAcceptableValues() {
    return acceptableValues;
  }

  public void setAcceptableValues(List<String> acceptableValues) {
    this.acceptableValues = acceptableValues;
  }


  public CreateDataTypeRequest unitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema; 
    return this;
  }

   /**
   * The schema of the data type&#39;s units. The available values are: NoUnits, Basic, Iso4217Currency
   * @return unitSchema
  **/
  @ApiModelProperty(value = "The schema of the data type's units. The available values are: NoUnits, Basic, Iso4217Currency")
  public UnitSchemaEnum getUnitSchema() {
    return unitSchema;
  }

  public void setUnitSchema(UnitSchemaEnum unitSchema) {
    this.unitSchema = unitSchema;
  }


  public CreateDataTypeRequest acceptableUnits(List<CreateUnitDefinition> acceptableUnits) {
    this.acceptableUnits = acceptableUnits; 
    return this;
  }

  public CreateDataTypeRequest addAcceptableUnitsItem(CreateUnitDefinition acceptableUnitsItem) {
   
    if (this.acceptableUnits == null) {
      this.acceptableUnits = new ArrayList<>();
    }
    this.acceptableUnits.add(acceptableUnitsItem);
    return this;
  }

   /**
   * The definitions of the acceptable units.
   * @return acceptableUnits
  **/
  @ApiModelProperty(value = "The definitions of the acceptable units.")
  public List<CreateUnitDefinition> getAcceptableUnits() {
    return acceptableUnits;
  }

  public void setAcceptableUnits(List<CreateUnitDefinition> acceptableUnits) {
    this.acceptableUnits = acceptableUnits;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDataTypeRequest {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    typeValueRange: ").append(toIndentedString(typeValueRange)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    acceptableValues: ").append(toIndentedString(acceptableValues)).append("\n");
    sb.append("    unitSchema: ").append(toIndentedString(unitSchema)).append("\n");
    sb.append("    acceptableUnits: ").append(toIndentedString(acceptableUnits)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
