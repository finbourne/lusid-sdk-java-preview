/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * EquityOptionAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EquityOptionAllOf {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_OPTION_MATURITY_DATE = "optionMaturityDate";
  @SerializedName(SERIALIZED_NAME_OPTION_MATURITY_DATE)
  private OffsetDateTime optionMaturityDate;

  public static final String SERIALIZED_NAME_OPTION_SETTLEMENT_DATE = "optionSettlementDate";
  @SerializedName(SERIALIZED_NAME_OPTION_SETTLEMENT_DATE)
  private OffsetDateTime optionSettlementDate;

  /**
   * The available values are: Cash, Physical
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    CASH("Cash"),
    
    PHYSICAL("Physical");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String value) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TYPE = "deliveryType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TYPE)
  private DeliveryTypeEnum deliveryType;

  /**
   * The available values are: None, Call, Put
   */
  @JsonAdapter(OptionTypeEnum.Adapter.class)
  public enum OptionTypeEnum {
    NONE("None"),
    
    CALL("Call"),
    
    PUT("Put");

    private String value;

    OptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OptionTypeEnum fromValue(String value) {
      for (OptionTypeEnum b : OptionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OptionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private OptionTypeEnum optionType;

  public static final String SERIALIZED_NAME_STRIKE = "strike";
  @SerializedName(SERIALIZED_NAME_STRIKE)
  private Double strike;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  /**
   * The available values are: LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode
   */
  @JsonAdapter(UnderlyingIdentifierEnum.Adapter.class)
  public enum UnderlyingIdentifierEnum {
    LUSIDINSTRUMENTID("LusidInstrumentId"),
    
    ISIN("Isin"),
    
    SEDOL("Sedol"),
    
    CUSIP("Cusip"),
    
    CLIENTINTERNAL("ClientInternal"),
    
    FIGI("Figi"),
    
    RIC("RIC"),
    
    QUOTEPERMID("QuotePermId"),
    
    REDCODE("REDCode"),
    
    BBGID("BBGId"),
    
    ICECODE("ICECode");

    private String value;

    UnderlyingIdentifierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnderlyingIdentifierEnum fromValue(String value) {
      for (UnderlyingIdentifierEnum b : UnderlyingIdentifierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnderlyingIdentifierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnderlyingIdentifierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnderlyingIdentifierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnderlyingIdentifierEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNDERLYING_IDENTIFIER = "underlyingIdentifier";
  @SerializedName(SERIALIZED_NAME_UNDERLYING_IDENTIFIER)
  private UnderlyingIdentifierEnum underlyingIdentifier;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  /**
   * The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo
   */
  @JsonAdapter(InstrumentTypeEnum.Adapter.class)
  public enum InstrumentTypeEnum {
    QUOTEDSECURITY("QuotedSecurity"),
    
    INTERESTRATESWAP("InterestRateSwap"),
    
    FXFORWARD("FxForward"),
    
    FUTURE("Future"),
    
    EXOTICINSTRUMENT("ExoticInstrument"),
    
    FXOPTION("FxOption"),
    
    CREDITDEFAULTSWAP("CreditDefaultSwap"),
    
    INTERESTRATESWAPTION("InterestRateSwaption"),
    
    BOND("Bond"),
    
    EQUITYOPTION("EquityOption"),
    
    FIXEDLEG("FixedLeg"),
    
    FLOATINGLEG("FloatingLeg"),
    
    BESPOKECASHFLOWSLEG("BespokeCashFlowsLeg"),
    
    UNKNOWN("Unknown"),
    
    TERMDEPOSIT("TermDeposit"),
    
    CONTRACTFORDIFFERENCE("ContractForDifference"),
    
    EQUITYSWAP("EquitySwap"),
    
    CASHPERPETUAL("CashPerpetual"),
    
    CASHSETTLED("CashSettled"),
    
    CDSINDEX("CdsIndex"),
    
    BASKET("Basket"),
    
    FUNDINGLEG("FundingLeg"),
    
    CROSSCURRENCYSWAP("CrossCurrencySwap"),
    
    FXSWAP("FxSwap"),
    
    FORWARDRATEAGREEMENT("ForwardRateAgreement"),
    
    SIMPLEINSTRUMENT("SimpleInstrument"),
    
    REPO("Repo");

    private String value;

    InstrumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstrumentTypeEnum fromValue(String value) {
      for (InstrumentTypeEnum b : InstrumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstrumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstrumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstrumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstrumentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTRUMENT_TYPE = "instrumentType";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_TYPE)
  private InstrumentTypeEnum instrumentType;


  public EquityOptionAllOf startDate(OffsetDateTime startDate) {
    this.startDate = startDate; 
    return this;
  }

   /**
   * The start date of the instrument. This is normally synonymous with the trade-date.
   * @return startDate
  **/
  @ApiModelProperty(required = true, value = "The start date of the instrument. This is normally synonymous with the trade-date.")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public EquityOptionAllOf optionMaturityDate(OffsetDateTime optionMaturityDate) {
    this.optionMaturityDate = optionMaturityDate; 
    return this;
  }

   /**
   * The maturity date of the option.
   * @return optionMaturityDate
  **/
  @ApiModelProperty(required = true, value = "The maturity date of the option.")
  public OffsetDateTime getOptionMaturityDate() {
    return optionMaturityDate;
  }

  public void setOptionMaturityDate(OffsetDateTime optionMaturityDate) {
    this.optionMaturityDate = optionMaturityDate;
  }


  public EquityOptionAllOf optionSettlementDate(OffsetDateTime optionSettlementDate) {
    this.optionSettlementDate = optionSettlementDate; 
    return this;
  }

   /**
   * The settlement date of the option.
   * @return optionSettlementDate
  **/
  @ApiModelProperty(required = true, value = "The settlement date of the option.")
  public OffsetDateTime getOptionSettlementDate() {
    return optionSettlementDate;
  }

  public void setOptionSettlementDate(OffsetDateTime optionSettlementDate) {
    this.optionSettlementDate = optionSettlementDate;
  }


  public EquityOptionAllOf deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType; 
    return this;
  }

   /**
   * The available values are: Cash, Physical
   * @return deliveryType
  **/
  @ApiModelProperty(required = true, value = "The available values are: Cash, Physical")
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }


  public EquityOptionAllOf optionType(OptionTypeEnum optionType) {
    this.optionType = optionType; 
    return this;
  }

   /**
   * The available values are: None, Call, Put
   * @return optionType
  **/
  @ApiModelProperty(required = true, value = "The available values are: None, Call, Put")
  public OptionTypeEnum getOptionType() {
    return optionType;
  }

  public void setOptionType(OptionTypeEnum optionType) {
    this.optionType = optionType;
  }


  public EquityOptionAllOf strike(Double strike) {
    this.strike = strike; 
    return this;
  }

   /**
   * The strike of the option.
   * @return strike
  **/
  @ApiModelProperty(required = true, value = "The strike of the option.")
  public Double getStrike() {
    return strike;
  }

  public void setStrike(Double strike) {
    this.strike = strike;
  }


  public EquityOptionAllOf domCcy(String domCcy) {
    this.domCcy = domCcy; 
    return this;
  }

   /**
   * The domestic currency of the instrument.
   * @return domCcy
  **/
  @ApiModelProperty(required = true, value = "The domestic currency of the instrument.")
  public String getDomCcy() {
    return domCcy;
  }

  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public EquityOptionAllOf underlyingIdentifier(UnderlyingIdentifierEnum underlyingIdentifier) {
    this.underlyingIdentifier = underlyingIdentifier; 
    return this;
  }

   /**
   * The available values are: LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode
   * @return underlyingIdentifier
  **/
  @ApiModelProperty(required = true, value = "The available values are: LusidInstrumentId, Isin, Sedol, Cusip, ClientInternal, Figi, RIC, QuotePermId, REDCode, BBGId, ICECode")
  public UnderlyingIdentifierEnum getUnderlyingIdentifier() {
    return underlyingIdentifier;
  }

  public void setUnderlyingIdentifier(UnderlyingIdentifierEnum underlyingIdentifier) {
    this.underlyingIdentifier = underlyingIdentifier;
  }


  public EquityOptionAllOf code(String code) {
    this.code = code; 
    return this;
  }

   /**
   * The identifying code for the equity underlying, e.g. &#39;IBM.N&#39;.
   * @return code
  **/
  @ApiModelProperty(required = true, value = "The identifying code for the equity underlying, e.g. 'IBM.N'.")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EquityOptionAllOf instrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType; 
    return this;
  }

   /**
   * The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo
   * @return instrumentType
  **/
  @ApiModelProperty(required = true, value = "The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo")
  public InstrumentTypeEnum getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(InstrumentTypeEnum instrumentType) {
    this.instrumentType = instrumentType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EquityOptionAllOf {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    optionMaturityDate: ").append(toIndentedString(optionMaturityDate)).append("\n");
    sb.append("    optionSettlementDate: ").append(toIndentedString(optionSettlementDate)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    strike: ").append(toIndentedString(strike)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    underlyingIdentifier: ").append(toIndentedString(underlyingIdentifier)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
