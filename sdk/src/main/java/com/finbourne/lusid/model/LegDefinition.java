/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.FlowConventionName;
import com.finbourne.lusid.model.FlowConventions;
import com.finbourne.lusid.model.IndexConvention;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg.
 */
@ApiModel(description = "Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LegDefinition {
  public static final String SERIALIZED_NAME_CONVENTION_NAME = "conventionName";
  @SerializedName(SERIALIZED_NAME_CONVENTION_NAME)
  private FlowConventionName conventionName;

  public static final String SERIALIZED_NAME_CONVENTIONS = "conventions";
  @SerializedName(SERIALIZED_NAME_CONVENTIONS)
  private FlowConventions conventions;

  public static final String SERIALIZED_NAME_INDEX_CONVENTION = "indexConvention";
  @SerializedName(SERIALIZED_NAME_INDEX_CONVENTION)
  private IndexConvention indexConvention;

  public static final String SERIALIZED_NAME_INDEX_CONVENTION_NAME = "indexConventionName";
  @SerializedName(SERIALIZED_NAME_INDEX_CONVENTION_NAME)
  private FlowConventionName indexConventionName;

  public static final String SERIALIZED_NAME_NOTIONAL_EXCHANGE_TYPE = "notionalExchangeType";
  @SerializedName(SERIALIZED_NAME_NOTIONAL_EXCHANGE_TYPE)
  private String notionalExchangeType;

  public static final String SERIALIZED_NAME_PAY_RECEIVE = "payReceive";
  @SerializedName(SERIALIZED_NAME_PAY_RECEIVE)
  private String payReceive;

  public static final String SERIALIZED_NAME_RATE_OR_SPREAD = "rateOrSpread";
  @SerializedName(SERIALIZED_NAME_RATE_OR_SPREAD)
  private Double rateOrSpread;

  public static final String SERIALIZED_NAME_RESET_CONVENTION = "resetConvention";
  @SerializedName(SERIALIZED_NAME_RESET_CONVENTION)
  private String resetConvention;

  public static final String SERIALIZED_NAME_STUB_TYPE = "stubType";
  @SerializedName(SERIALIZED_NAME_STUB_TYPE)
  private String stubType;


  public LegDefinition conventionName(FlowConventionName conventionName) {
    this.conventionName = conventionName; 
    return this;
  }

   /**
   * Get conventionName
   * @return conventionName
  **/
  @ApiModelProperty(value = "")
  public FlowConventionName getConventionName() {
    return conventionName;
  }

  public void setConventionName(FlowConventionName conventionName) {
    this.conventionName = conventionName;
  }


  public LegDefinition conventions(FlowConventions conventions) {
    this.conventions = conventions; 
    return this;
  }

   /**
   * Get conventions
   * @return conventions
  **/
  @ApiModelProperty(value = "")
  public FlowConventions getConventions() {
    return conventions;
  }

  public void setConventions(FlowConventions conventions) {
    this.conventions = conventions;
  }


  public LegDefinition indexConvention(IndexConvention indexConvention) {
    this.indexConvention = indexConvention; 
    return this;
  }

   /**
   * Get indexConvention
   * @return indexConvention
  **/
  @ApiModelProperty(value = "")
  public IndexConvention getIndexConvention() {
    return indexConvention;
  }

  public void setIndexConvention(IndexConvention indexConvention) {
    this.indexConvention = indexConvention;
  }


  public LegDefinition indexConventionName(FlowConventionName indexConventionName) {
    this.indexConventionName = indexConventionName; 
    return this;
  }

   /**
   * Get indexConventionName
   * @return indexConventionName
  **/
  @ApiModelProperty(value = "")
  public FlowConventionName getIndexConventionName() {
    return indexConventionName;
  }

  public void setIndexConventionName(FlowConventionName indexConventionName) {
    this.indexConventionName = indexConventionName;
  }


  public LegDefinition notionalExchangeType(String notionalExchangeType) {
    this.notionalExchangeType = notionalExchangeType; 
    return this;
  }

   /**
   * what type of notional exchange does the leg have  Supported string (enumeration) values are: [None, Initial, Final, Both].
   * @return notionalExchangeType
  **/
  @ApiModelProperty(required = true, value = "what type of notional exchange does the leg have  Supported string (enumeration) values are: [None, Initial, Final, Both].")
  public String getNotionalExchangeType() {
    return notionalExchangeType;
  }

  public void setNotionalExchangeType(String notionalExchangeType) {
    this.notionalExchangeType = notionalExchangeType;
  }


  public LegDefinition payReceive(String payReceive) {
    this.payReceive = payReceive; 
    return this;
  }

   /**
   * Is the leg to be paid or received  Supported string (enumeration) values are: [Pay, Receive].
   * @return payReceive
  **/
  @ApiModelProperty(required = true, value = "Is the leg to be paid or received  Supported string (enumeration) values are: [Pay, Receive].")
  public String getPayReceive() {
    return payReceive;
  }

  public void setPayReceive(String payReceive) {
    this.payReceive = payReceive;
  }


  public LegDefinition rateOrSpread(Double rateOrSpread) {
    this.rateOrSpread = rateOrSpread; 
    return this;
  }

   /**
   * Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.
   * @return rateOrSpread
  **/
  @ApiModelProperty(required = true, value = "Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.")
  public Double getRateOrSpread() {
    return rateOrSpread;
  }

  public void setRateOrSpread(Double rateOrSpread) {
    this.rateOrSpread = rateOrSpread;
  }


  public LegDefinition resetConvention(String resetConvention) {
    this.resetConvention = resetConvention; 
    return this;
  }

   /**
   * Control how resets are generated relative to swap payment convention(s).  Supported string (enumeration) values are: [InAdvance, InArrears].
   * @return resetConvention
  **/
  @ApiModelProperty(value = "Control how resets are generated relative to swap payment convention(s).  Supported string (enumeration) values are: [InAdvance, InArrears].")
  public String getResetConvention() {
    return resetConvention;
  }

  public void setResetConvention(String resetConvention) {
    this.resetConvention = resetConvention;
  }


  public LegDefinition stubType(String stubType) {
    this.stubType = stubType; 
    return this;
  }

   /**
   * If a stub is required should it be at the front or back of the leg.  Supported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront].
   * @return stubType
  **/
  @ApiModelProperty(required = true, value = "If a stub is required should it be at the front or back of the leg.  Supported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront].")
  public String getStubType() {
    return stubType;
  }

  public void setStubType(String stubType) {
    this.stubType = stubType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegDefinition {\n");
    sb.append("    conventionName: ").append(toIndentedString(conventionName)).append("\n");
    sb.append("    conventions: ").append(toIndentedString(conventions)).append("\n");
    sb.append("    indexConvention: ").append(toIndentedString(indexConvention)).append("\n");
    sb.append("    indexConventionName: ").append(toIndentedString(indexConventionName)).append("\n");
    sb.append("    notionalExchangeType: ").append(toIndentedString(notionalExchangeType)).append("\n");
    sb.append("    payReceive: ").append(toIndentedString(payReceive)).append("\n");
    sb.append("    rateOrSpread: ").append(toIndentedString(rateOrSpread)).append("\n");
    sb.append("    resetConvention: ").append(toIndentedString(resetConvention)).append("\n");
    sb.append("    stubType: ").append(toIndentedString(stubType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
