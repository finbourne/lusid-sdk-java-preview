/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.CurrencyAndAmount;
import com.finbourne.lusid.model.PerpetualProperty;
import com.finbourne.lusid.model.Property;
import com.finbourne.lusid.model.Transaction;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A list of holdings.
 */
@ApiModel(description = "A list of holdings.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PortfolioHolding {
  public static final String SERIALIZED_NAME_INSTRUMENT_UID = "instrumentUid";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_UID)
  private String instrumentUid;

  public static final String SERIALIZED_NAME_SUB_HOLDING_KEYS = "subHoldingKeys";
  @SerializedName(SERIALIZED_NAME_SUB_HOLDING_KEYS)
  private Map<String, PerpetualProperty> subHoldingKeys = null;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, Property> properties = null;

  public static final String SERIALIZED_NAME_HOLDING_TYPE = "holdingType";
  @SerializedName(SERIALIZED_NAME_HOLDING_TYPE)
  private String holdingType;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private Double units;

  public static final String SERIALIZED_NAME_SETTLED_UNITS = "settledUnits";
  @SerializedName(SERIALIZED_NAME_SETTLED_UNITS)
  private Double settledUnits;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private CurrencyAndAmount cost;

  public static final String SERIALIZED_NAME_COST_PORTFOLIO_CCY = "costPortfolioCcy";
  @SerializedName(SERIALIZED_NAME_COST_PORTFOLIO_CCY)
  private CurrencyAndAmount costPortfolioCcy;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Transaction transaction;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;


  public PortfolioHolding instrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid; 
    return this;
  }

   /**
   * The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return instrumentUid
  **/
  @ApiModelProperty(required = true, value = "The unique Lusid Instrument Id (LUID) of the instrument that the holding is in.")
  public String getInstrumentUid() {
    return instrumentUid;
  }

  public void setInstrumentUid(String instrumentUid) {
    this.instrumentUid = instrumentUid;
  }


  public PortfolioHolding subHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys; 
    return this;
  }

  public PortfolioHolding putSubHoldingKeysItem(String key, PerpetualProperty subHoldingKeysItem) {
    if (this.subHoldingKeys == null) {
      this.subHoldingKeys = new HashMap<>();
    }
    this.subHoldingKeys.put(key, subHoldingKeysItem);
    return this;
  }

   /**
   * The sub-holding properties which identify the holding. Each property will be from the &#39;Transaction&#39; domain. These are configured when a transaction portfolio is created.
   * @return subHoldingKeys
  **/
  @ApiModelProperty(value = "The sub-holding properties which identify the holding. Each property will be from the 'Transaction' domain. These are configured when a transaction portfolio is created.")
  public Map<String, PerpetualProperty> getSubHoldingKeys() {
    return subHoldingKeys;
  }

  public void setSubHoldingKeys(Map<String, PerpetualProperty> subHoldingKeys) {
    this.subHoldingKeys = subHoldingKeys;
  }


  public PortfolioHolding properties(Map<String, Property> properties) {
    this.properties = properties; 
    return this;
  }

  public PortfolioHolding putPropertiesItem(String key, Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * The properties which have been requested to be decorated onto the holding. These will be from the &#39;Instrument&#39; or &#39;Holding&#39; domain.
   * @return properties
  **/
  @ApiModelProperty(value = "The properties which have been requested to be decorated onto the holding. These will be from the 'Instrument' or 'Holding' domain.")
  public Map<String, Property> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, Property> properties) {
    this.properties = properties;
  }


  public PortfolioHolding holdingType(String holdingType) {
    this.holdingType = holdingType; 
    return this;
  }

   /**
   * The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.
   * @return holdingType
  **/
  @ApiModelProperty(required = true, value = "The type of the holding e.g. Position, Balance, CashCommitment, Receivable, ForwardFX etc.")
  public String getHoldingType() {
    return holdingType;
  }

  public void setHoldingType(String holdingType) {
    this.holdingType = holdingType;
  }


  public PortfolioHolding units(Double units) {
    this.units = units; 
    return this;
  }

   /**
   * The total number of units of the holding.
   * @return units
  **/
  @ApiModelProperty(required = true, value = "The total number of units of the holding.")
  public Double getUnits() {
    return units;
  }

  public void setUnits(Double units) {
    this.units = units;
  }


  public PortfolioHolding settledUnits(Double settledUnits) {
    this.settledUnits = settledUnits; 
    return this;
  }

   /**
   * The total number of settled units of the holding.
   * @return settledUnits
  **/
  @ApiModelProperty(required = true, value = "The total number of settled units of the holding.")
  public Double getSettledUnits() {
    return settledUnits;
  }

  public void setSettledUnits(Double settledUnits) {
    this.settledUnits = settledUnits;
  }


  public PortfolioHolding cost(CurrencyAndAmount cost) {
    this.cost = cost; 
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @ApiModelProperty(required = true, value = "")
  public CurrencyAndAmount getCost() {
    return cost;
  }

  public void setCost(CurrencyAndAmount cost) {
    this.cost = cost;
  }


  public PortfolioHolding costPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    this.costPortfolioCcy = costPortfolioCcy; 
    return this;
  }

   /**
   * Get costPortfolioCcy
   * @return costPortfolioCcy
  **/
  @ApiModelProperty(required = true, value = "")
  public CurrencyAndAmount getCostPortfolioCcy() {
    return costPortfolioCcy;
  }

  public void setCostPortfolioCcy(CurrencyAndAmount costPortfolioCcy) {
    this.costPortfolioCcy = costPortfolioCcy;
  }


  public PortfolioHolding transaction(Transaction transaction) {
    this.transaction = transaction; 
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @ApiModelProperty(value = "")
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }


  public PortfolioHolding currency(String currency) {
    this.currency = currency; 
    return this;
  }

   /**
   * The holding currency.
   * @return currency
  **/
  @ApiModelProperty(value = "The holding currency.")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioHolding {\n");
    sb.append("    instrumentUid: ").append(toIndentedString(instrumentUid)).append("\n");
    sb.append("    subHoldingKeys: ").append(toIndentedString(subHoldingKeys)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    holdingType: ").append(toIndentedString(holdingType)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    settledUnits: ").append(toIndentedString(settledUnits)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    costPortfolioCcy: ").append(toIndentedString(costPortfolioCcy)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
