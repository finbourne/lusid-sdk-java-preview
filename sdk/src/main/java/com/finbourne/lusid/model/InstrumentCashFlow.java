/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.Link;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The details for the cashflow associated with an instrument from a given portfolio.
 */
@ApiModel(description = "The details for the cashflow associated with an instrument from a given portfolio.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InstrumentCashFlow {
  public static final String SERIALIZED_NAME_PAYMENT_DATE = "paymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private OffsetDateTime paymentDate;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_SOURCE_TRANSACTION_ID = "sourceTransactionId";
  @SerializedName(SERIALIZED_NAME_SOURCE_TRANSACTION_ID)
  private String sourceTransactionId;

  public static final String SERIALIZED_NAME_SOURCE_INSTRUMENT_ID = "sourceInstrumentId";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTRUMENT_ID)
  private String sourceInstrumentId;

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private Map<String, String> diagnostics = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;


  public InstrumentCashFlow paymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate; 
    return this;
  }

   /**
   * The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)
   * @return paymentDate
  **/
  @ApiModelProperty(required = true, value = "The date at which the given cash flow is due to be paid (SettlementDate is used somewhat interchangeably with PaymentDate.)")
  public OffsetDateTime getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(OffsetDateTime paymentDate) {
    this.paymentDate = paymentDate;
  }


  public InstrumentCashFlow amount(Double amount) {
    this.amount = amount; 
    return this;
  }

   /**
   * The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.
   * @return amount
  **/
  @ApiModelProperty(value = "The quantity (amount) that will be paid. Note that this can be empty if the payment is in the future and a model is used that cannot estimate it.")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public InstrumentCashFlow currency(String currency) {
    this.currency = currency; 
    return this;
  }

   /**
   * The payment currency of the cash flow.
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "The payment currency of the cash flow.")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InstrumentCashFlow sourceTransactionId(String sourceTransactionId) {
    this.sourceTransactionId = sourceTransactionId; 
    return this;
  }

   /**
   * The identifier for the parent transaction on the instrument that will pay/receive this cash flow.
   * @return sourceTransactionId
  **/
  @ApiModelProperty(required = true, value = "The identifier for the parent transaction on the instrument that will pay/receive this cash flow.")
  public String getSourceTransactionId() {
    return sourceTransactionId;
  }

  public void setSourceTransactionId(String sourceTransactionId) {
    this.sourceTransactionId = sourceTransactionId;
  }


  public InstrumentCashFlow sourceInstrumentId(String sourceInstrumentId) {
    this.sourceInstrumentId = sourceInstrumentId; 
    return this;
  }

   /**
   * The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.
   * @return sourceInstrumentId
  **/
  @ApiModelProperty(required = true, value = "The unqiue Lusid Instrument Id (LUID) of the instrument that the holding is in.")
  public String getSourceInstrumentId() {
    return sourceInstrumentId;
  }

  public void setSourceInstrumentId(String sourceInstrumentId) {
    this.sourceInstrumentId = sourceInstrumentId;
  }


  public InstrumentCashFlow diagnostics(Map<String, String> diagnostics) {
    this.diagnostics = diagnostics; 
    return this;
  }

  public InstrumentCashFlow putDiagnosticsItem(String key, String diagnosticsItem) {
    this.diagnostics.put(key, diagnosticsItem);
    return this;
  }

   /**
   * Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data.
   * @return diagnostics
  **/
  @ApiModelProperty(required = true, value = "Whilst a cash flow is defined by an (amount,ccy) pair and the date it is paid on there is additional information required for diagnostics. This includes a range of information and can be empty in the case of a simple cash quantity or where further information is not available. Typical information includes items such as reset dates, RIC, accrual start/end, number of days and curve data.")
  public Map<String, String> getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(Map<String, String> diagnostics) {
    this.diagnostics = diagnostics;
  }


  public InstrumentCashFlow links(List<Link> links) {
    this.links = links; 
    return this;
  }

  public InstrumentCashFlow addLinksItem(Link linksItem) {
   
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Collection of links.
   * @return links
  **/
  @ApiModelProperty(value = "Collection of links.")
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return true;
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstrumentCashFlow {\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    sourceTransactionId: ").append(toIndentedString(sourceTransactionId)).append("\n");
    sb.append("    sourceInstrumentId: ").append(toIndentedString(sourceInstrumentId)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
