/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateRelationshipDefinitionRequest;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.RelationshipDefinition;
import com.finbourne.lusid.model.UpdateRelationshipDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RelationshipDefinitionsApi {
    private ApiClient localVarApiClient;
    public RelationshipDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RelationshipDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRelationshipDefinition
     * @param createRelationshipDefinitionRequest The definition of the new relationship. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRelationshipDefinitionCall(CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createRelationshipDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/relationshipdefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3439");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRelationshipDefinitionValidateBeforeCall(CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createRelationshipDefinitionRequest' is set
        if (createRelationshipDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createRelationshipDefinitionRequest' when calling createRelationshipDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = createRelationshipDefinitionCall(createRelationshipDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] Create Relationship Definition
     * Create a new relationship definition to be used for creating relationships between entities.
     * @param createRelationshipDefinitionRequest The definition of the new relationship. (required)
     * @return RelationshipDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipDefinition createRelationshipDefinition(CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest) throws ApiException {
        ApiResponse<RelationshipDefinition> localVarResp = createRelationshipDefinitionWithHttpInfo(createRelationshipDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] Create Relationship Definition
     * Create a new relationship definition to be used for creating relationships between entities.
     * @param createRelationshipDefinitionRequest The definition of the new relationship. (required)
     * @return ApiResponse&lt;RelationshipDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipDefinition> createRelationshipDefinitionWithHttpInfo(CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createRelationshipDefinitionValidateBeforeCall(createRelationshipDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] Create Relationship Definition (asynchronously)
     * Create a new relationship definition to be used for creating relationships between entities.
     * @param createRelationshipDefinitionRequest The definition of the new relationship. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRelationshipDefinitionAsync(CreateRelationshipDefinitionRequest createRelationshipDefinitionRequest, final ApiCallback<RelationshipDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = createRelationshipDefinitionValidateBeforeCall(createRelationshipDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRelationshipDefinition
     * @param scope The scope of the specified relationship definition. (required)
     * @param code The code of the specified relationship definition. Together with the domain and scope this uniquely              identifies the relationship definition. (required)
     * @param asAt The asAt datetime at which to retrieve the relationship definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationshipDefinitionCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/relationshipdefinitions/{scope}/{code}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3439");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelationshipDefinitionValidateBeforeCall(String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getRelationshipDefinition(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getRelationshipDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = getRelationshipDefinitionCall(scope, code, asAt, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] Get relationship definition
     * Retrieve the specified relationship definition
     * @param scope The scope of the specified relationship definition. (required)
     * @param code The code of the specified relationship definition. Together with the domain and scope this uniquely              identifies the relationship definition. (required)
     * @param asAt The asAt datetime at which to retrieve the relationship definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @return RelationshipDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipDefinition getRelationshipDefinition(String scope, String code, OffsetDateTime asAt) throws ApiException {
        ApiResponse<RelationshipDefinition> localVarResp = getRelationshipDefinitionWithHttpInfo(scope, code, asAt);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] Get relationship definition
     * Retrieve the specified relationship definition
     * @param scope The scope of the specified relationship definition. (required)
     * @param code The code of the specified relationship definition. Together with the domain and scope this uniquely              identifies the relationship definition. (required)
     * @param asAt The asAt datetime at which to retrieve the relationship definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @return ApiResponse&lt;RelationshipDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipDefinition> getRelationshipDefinitionWithHttpInfo(String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getRelationshipDefinitionValidateBeforeCall(scope, code, asAt, null);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] Get relationship definition (asynchronously)
     * Retrieve the specified relationship definition
     * @param scope The scope of the specified relationship definition. (required)
     * @param code The code of the specified relationship definition. Together with the domain and scope this uniquely              identifies the relationship definition. (required)
     * @param asAt The asAt datetime at which to retrieve the relationship definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRelationshipDefinitionAsync(String scope, String code, OffsetDateTime asAt, final ApiCallback<RelationshipDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = getRelationshipDefinitionValidateBeforeCall(scope, code, asAt, _callback);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRelationshipDefinition
     * @param scope The scope of the relationship definition being updated. (required)
     * @param code The code of the relationship definition being updated. Together with the scope this uniquely              identifies the relationship definition. (required)
     * @param updateRelationshipDefinitionRequest The details of relationship definition to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRelationshipDefinitionCall(String scope, String code, UpdateRelationshipDefinitionRequest updateRelationshipDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateRelationshipDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/relationshipdefinitions/{scope}/{code}"
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3439");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRelationshipDefinitionValidateBeforeCall(String scope, String code, UpdateRelationshipDefinitionRequest updateRelationshipDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateRelationshipDefinition(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateRelationshipDefinition(Async)");
        }
        
        // verify the required parameter 'updateRelationshipDefinitionRequest' is set
        if (updateRelationshipDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRelationshipDefinitionRequest' when calling updateRelationshipDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = updateRelationshipDefinitionCall(scope, code, updateRelationshipDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * [EXPERIMENTAL] Update Relationship Definition
     * Update the definition of a specified existing relationship. Not all elements within a relationship definition  are modifiable due to the potential implications for values already stored against the relationship.
     * @param scope The scope of the relationship definition being updated. (required)
     * @param code The code of the relationship definition being updated. Together with the scope this uniquely              identifies the relationship definition. (required)
     * @param updateRelationshipDefinitionRequest The details of relationship definition to update. (required)
     * @return RelationshipDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipDefinition updateRelationshipDefinition(String scope, String code, UpdateRelationshipDefinitionRequest updateRelationshipDefinitionRequest) throws ApiException {
        ApiResponse<RelationshipDefinition> localVarResp = updateRelationshipDefinitionWithHttpInfo(scope, code, updateRelationshipDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * [EXPERIMENTAL] Update Relationship Definition
     * Update the definition of a specified existing relationship. Not all elements within a relationship definition  are modifiable due to the potential implications for values already stored against the relationship.
     * @param scope The scope of the relationship definition being updated. (required)
     * @param code The code of the relationship definition being updated. Together with the scope this uniquely              identifies the relationship definition. (required)
     * @param updateRelationshipDefinitionRequest The details of relationship definition to update. (required)
     * @return ApiResponse&lt;RelationshipDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipDefinition> updateRelationshipDefinitionWithHttpInfo(String scope, String code, UpdateRelationshipDefinitionRequest updateRelationshipDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRelationshipDefinitionValidateBeforeCall(scope, code, updateRelationshipDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EXPERIMENTAL] Update Relationship Definition (asynchronously)
     * Update the definition of a specified existing relationship. Not all elements within a relationship definition  are modifiable due to the potential implications for values already stored against the relationship.
     * @param scope The scope of the relationship definition being updated. (required)
     * @param code The code of the relationship definition being updated. Together with the scope this uniquely              identifies the relationship definition. (required)
     * @param updateRelationshipDefinitionRequest The details of relationship definition to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated relationship definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRelationshipDefinitionAsync(String scope, String code, UpdateRelationshipDefinitionRequest updateRelationshipDefinitionRequest, final ApiCallback<RelationshipDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = updateRelationshipDefinitionValidateBeforeCall(scope, code, updateRelationshipDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<RelationshipDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
