/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiCallback;
import com.finbourne.lusid.ApiClient;
import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.ApiResponse;
import com.finbourne.lusid.Configuration;
import com.finbourne.lusid.Pair;
import com.finbourne.lusid.ProgressRequestBody;
import com.finbourne.lusid.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.lusid.model.CreateDerivedPropertyDefinitionRequest;
import com.finbourne.lusid.model.CreatePropertyDefinitionRequest;
import com.finbourne.lusid.model.DeletedEntityResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.PropertyDefinition;
import com.finbourne.lusid.model.ResourceListOfPropertyDefinition;
import com.finbourne.lusid.model.UpdatePropertyDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertyDefinitionsApi {
    private ApiClient localVarApiClient;
    public PropertyDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertyDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createDerivedPropertyDefinition
     * @param createDerivedPropertyDefinitionRequest The definition of the new derived property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDerivedPropertyDefinitionCall(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createDerivedPropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/derived";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDerivedPropertyDefinitionValidateBeforeCall(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createDerivedPropertyDefinitionRequest' is set
        if (createDerivedPropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createDerivedPropertyDefinitionRequest' when calling createDerivedPropertyDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = createDerivedPropertyDefinitionCall(createDerivedPropertyDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * [EARLY ACCESS] Create derived property definition
     * Define a new derived property.
     * @param createDerivedPropertyDefinitionRequest The definition of the new derived property. (required)
     * @return PropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PropertyDefinition createDerivedPropertyDefinition(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest) throws ApiException {
        ApiResponse<PropertyDefinition> localVarResp = createDerivedPropertyDefinitionWithHttpInfo(createDerivedPropertyDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * [EARLY ACCESS] Create derived property definition
     * Define a new derived property.
     * @param createDerivedPropertyDefinitionRequest The definition of the new derived property. (required)
     * @return ApiResponse&lt;PropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyDefinition> createDerivedPropertyDefinitionWithHttpInfo(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * [EARLY ACCESS] Create derived property definition (asynchronously)
     * Define a new derived property.
     * @param createDerivedPropertyDefinitionRequest The definition of the new derived property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created derived property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDerivedPropertyDefinitionAsync(CreateDerivedPropertyDefinitionRequest createDerivedPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = createDerivedPropertyDefinitionValidateBeforeCall(createDerivedPropertyDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPropertyDefinition
     * @param createPropertyDefinitionRequest The definition of the new property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPropertyDefinitionCall(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPropertyDefinitionValidateBeforeCall(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createPropertyDefinitionRequest' is set
        if (createPropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'createPropertyDefinitionRequest' when calling createPropertyDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = createPropertyDefinitionCall(createPropertyDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * Create property definition
     * Define a new property.
     * @param createPropertyDefinitionRequest The definition of the new property. (required)
     * @return PropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PropertyDefinition createPropertyDefinition(CreatePropertyDefinitionRequest createPropertyDefinitionRequest) throws ApiException {
        ApiResponse<PropertyDefinition> localVarResp = createPropertyDefinitionWithHttpInfo(createPropertyDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * Create property definition
     * Define a new property.
     * @param createPropertyDefinitionRequest The definition of the new property. (required)
     * @return ApiResponse&lt;PropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyDefinition> createPropertyDefinitionWithHttpInfo(CreatePropertyDefinitionRequest createPropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create property definition (asynchronously)
     * Define a new property.
     * @param createPropertyDefinitionRequest The definition of the new property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The newly created property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPropertyDefinitionAsync(CreatePropertyDefinitionRequest createPropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = createPropertyDefinitionValidateBeforeCall(createPropertyDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePropertyDefinition
     * @param domain The domain of the property to be deleted. (required)
     * @param scope The scope of the property to be deleted. (required)
     * @param code The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyDefinitionCall(String domain, String scope, String code, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePropertyDefinitionValidateBeforeCall(String domain, String scope, String code, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling deletePropertyDefinition(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deletePropertyDefinition(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deletePropertyDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = deletePropertyDefinitionCall(domain, scope, code, _callback);
        return localVarCall;

    }

    /**
     * Delete property definition
     * Delete the definition of the specified property.
     * @param domain The domain of the property to be deleted. (required)
     * @param scope The scope of the property to be deleted. (required)
     * @param code The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property. (required)
     * @return DeletedEntityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public DeletedEntityResponse deletePropertyDefinition(String domain, String scope, String code) throws ApiException {
        ApiResponse<DeletedEntityResponse> localVarResp = deletePropertyDefinitionWithHttpInfo(domain, scope, code);
        return localVarResp.getData();
    }

    /**
     * Delete property definition
     * Delete the definition of the specified property.
     * @param domain The domain of the property to be deleted. (required)
     * @param scope The scope of the property to be deleted. (required)
     * @param code The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property. (required)
     * @return ApiResponse&lt;DeletedEntityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedEntityResponse> deletePropertyDefinitionWithHttpInfo(String domain, String scope, String code) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, null);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete property definition (asynchronously)
     * Delete the definition of the specified property.
     * @param domain The domain of the property to be deleted. (required)
     * @param scope The scope of the property to be deleted. (required)
     * @param code The code of the property to be deleted. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The time that the property definition was deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePropertyDefinitionAsync(String domain, String scope, String code, final ApiCallback<DeletedEntityResponse> _callback) throws ApiException {
        okhttp3.Call localVarCall = deletePropertyDefinitionValidateBeforeCall(domain, scope, code, _callback);
        Type localVarReturnType = new TypeToken<DeletedEntityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMultiplePropertyDefinitions
     * @param propertyKeys One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required)
     * @param asAt The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)
     * @param filter Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiplePropertyDefinitionsCall(List<String> propertyKeys, OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (propertyKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "propertyKeys", propertyKeys));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMultiplePropertyDefinitionsValidateBeforeCall(List<String> propertyKeys, OffsetDateTime asAt, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'propertyKeys' is set
        if (propertyKeys == null) {
            throw new ApiException("Missing the required parameter 'propertyKeys' when calling getMultiplePropertyDefinitions(Async)");
        }
        

        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsCall(propertyKeys, asAt, filter, _callback);
        return localVarCall;

    }

    /**
     * Get multiple property definitions
     * Retrieve the definition of one or more specified properties.
     * @param propertyKeys One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required)
     * @param asAt The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)
     * @param filter Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @return ResourceListOfPropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ResourceListOfPropertyDefinition getMultiplePropertyDefinitions(List<String> propertyKeys, OffsetDateTime asAt, String filter) throws ApiException {
        ApiResponse<ResourceListOfPropertyDefinition> localVarResp = getMultiplePropertyDefinitionsWithHttpInfo(propertyKeys, asAt, filter);
        return localVarResp.getData();
    }

    /**
     * Get multiple property definitions
     * Retrieve the definition of one or more specified properties.
     * @param propertyKeys One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required)
     * @param asAt The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)
     * @param filter Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @return ApiResponse&lt;ResourceListOfPropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceListOfPropertyDefinition> getMultiplePropertyDefinitionsWithHttpInfo(List<String> propertyKeys, OffsetDateTime asAt, String filter) throws ApiException {
        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, null);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get multiple property definitions (asynchronously)
     * Retrieve the definition of one or more specified properties.
     * @param propertyKeys One or more property keys which identify each property that a definition should              be retrieved for. The format for each property key is {domain}/{scope}/{code}, e.g. &#39;Portfolio/Manager/Id&#39;. (required)
     * @param asAt The asAt datetime at which to retrieve the property definitions. Defaults to return              the latest version of each definition if not specified. (optional)
     * @param filter Expression to filter the result set.               For example, to filter on the Lifetime, use \&quot;lifeTime eq &#39;Perpetual&#39;\&quot;              Read more about filtering results from LUSID here https://support.lusid.com/filtering-results-from-lusid. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definitions </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMultiplePropertyDefinitionsAsync(List<String> propertyKeys, OffsetDateTime asAt, String filter, final ApiCallback<ResourceListOfPropertyDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = getMultiplePropertyDefinitionsValidateBeforeCall(propertyKeys, asAt, filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceListOfPropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPropertyDefinition
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDefinitionCall(String domain, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asAt", asAt));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyDefinitionValidateBeforeCall(String domain, String scope, String code, OffsetDateTime asAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling getPropertyDefinition(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getPropertyDefinition(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getPropertyDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = getPropertyDefinitionCall(domain, scope, code, asAt, _callback);
        return localVarCall;

    }

    /**
     * Get property definition
     * Retrieve the definition of a specified property.
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @return PropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PropertyDefinition getPropertyDefinition(String domain, String scope, String code, OffsetDateTime asAt) throws ApiException {
        ApiResponse<PropertyDefinition> localVarResp = getPropertyDefinitionWithHttpInfo(domain, scope, code, asAt);
        return localVarResp.getData();
    }

    /**
     * Get property definition
     * Retrieve the definition of a specified property.
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @return ApiResponse&lt;PropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyDefinition> getPropertyDefinitionWithHttpInfo(String domain, String scope, String code, OffsetDateTime asAt) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, null);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get property definition (asynchronously)
     * Retrieve the definition of a specified property.
     * @param domain The domain of the specified property. (required)
     * @param scope The scope of the specified property. (required)
     * @param code The code of the specified property. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param asAt The asAt datetime at which to retrieve the property definition. Defaults to return              the latest version of the definition if not specified. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPropertyDefinitionAsync(String domain, String scope, String code, OffsetDateTime asAt, final ApiCallback<PropertyDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = getPropertyDefinitionValidateBeforeCall(domain, scope, code, asAt, _callback);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePropertyDefinition
     * @param domain The domain of the property being updated. (required)
     * @param scope The scope of the property being updated. (required)
     * @param code The code of the property being updated. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param updatePropertyDefinitionRequest The updated definition of the property. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyDefinitionCall(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatePropertyDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/propertydefinitions/{domain}/{scope}/{code}"
            .replaceAll("\\{" + "domain" + "\\}", localVarApiClient.escapeString(domain.toString()))
            .replaceAll("\\{" + "scope" + "\\}", localVarApiClient.escapeString(scope.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);
        localVarHeaderParams.put("X-LUSID-SDK-Language", "Java");
        localVarHeaderParams.put("X-LUSID-SDK-Version", "0.11.3438");

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertyDefinitionValidateBeforeCall(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling updatePropertyDefinition(Async)");
        }
        
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updatePropertyDefinition(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updatePropertyDefinition(Async)");
        }
        
        // verify the required parameter 'updatePropertyDefinitionRequest' is set
        if (updatePropertyDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePropertyDefinitionRequest' when calling updatePropertyDefinition(Async)");
        }
        

        okhttp3.Call localVarCall = updatePropertyDefinitionCall(domain, scope, code, updatePropertyDefinitionRequest, _callback);
        return localVarCall;

    }

    /**
     * Update property definition
     * Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
     * @param domain The domain of the property being updated. (required)
     * @param scope The scope of the property being updated. (required)
     * @param code The code of the property being updated. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param updatePropertyDefinitionRequest The updated definition of the property. (required)
     * @return PropertyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PropertyDefinition updatePropertyDefinition(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest) throws ApiException {
        ApiResponse<PropertyDefinition> localVarResp = updatePropertyDefinitionWithHttpInfo(domain, scope, code, updatePropertyDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * Update property definition
     * Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
     * @param domain The domain of the property being updated. (required)
     * @param scope The scope of the property being updated. (required)
     * @param code The code of the property being updated. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param updatePropertyDefinitionRequest The updated definition of the property. (required)
     * @return ApiResponse&lt;PropertyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyDefinition> updatePropertyDefinitionWithHttpInfo(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update property definition (asynchronously)
     * Update the definition of a specified existing property. Not all elements within a property definition  are modifiable due to the potential implications for values already stored against the property.
     * @param domain The domain of the property being updated. (required)
     * @param scope The scope of the property being updated. (required)
     * @param code The code of the property being updated. Together with the domain and scope this uniquely              identifies the property. (required)
     * @param updatePropertyDefinitionRequest The updated definition of the property. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated property definition </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePropertyDefinitionAsync(String domain, String scope, String code, UpdatePropertyDefinitionRequest updatePropertyDefinitionRequest, final ApiCallback<PropertyDefinition> _callback) throws ApiException {
        okhttp3.Call localVarCall = updatePropertyDefinitionValidateBeforeCall(domain, scope, code, updatePropertyDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<PropertyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
