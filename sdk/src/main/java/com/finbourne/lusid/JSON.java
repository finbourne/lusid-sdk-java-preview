/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import com.finbourne.lusid.model.*;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

public class JSON {
    private Gson gson;
    private boolean isLenientOnJson = false;
    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(Basket.class, new TypeSelector<Basket>() {
                    @Override
                    public Class<? extends Basket> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Basket", Basket.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(Bond.class, new TypeSelector<Bond>() {
                    @Override
                    public Class<? extends Bond> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Bond", Bond.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(CashPerpetual.class, new TypeSelector<CashPerpetual>() {
                    @Override
                    public Class<? extends CashPerpetual> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CashPerpetual", CashPerpetual.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(CdsIndex.class, new TypeSelector<CdsIndex>() {
                    @Override
                    public Class<? extends CdsIndex> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CdsIndex", CdsIndex.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(ComplexMarketData.class, new TypeSelector<ComplexMarketData>() {
                    @Override
                    public Class<? extends ComplexMarketData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DiscountFactorCurveData", DiscountFactorCurveData.class);
                        classByDiscriminatorValue.put("EquityVolSurfaceData", EquityVolSurfaceData.class);
                        classByDiscriminatorValue.put("FxVolSurfaceData", FxVolSurfaceData.class);
                        classByDiscriminatorValue.put("IrVolCubeData", IrVolCubeData.class);
                        classByDiscriminatorValue.put("OpaqueMarketData", OpaqueMarketData.class);
                        classByDiscriminatorValue.put("YieldCurveData", YieldCurveData.class);
                        classByDiscriminatorValue.put("ComplexMarketData", ComplexMarketData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(ContractForDifference.class, new TypeSelector<ContractForDifference>() {
                    @Override
                    public Class<? extends ContractForDifference> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ContractForDifference", ContractForDifference.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(CreditDefaultSwap.class, new TypeSelector<CreditDefaultSwap>() {
                    @Override
                    public Class<? extends CreditDefaultSwap> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CreditDefaultSwap", CreditDefaultSwap.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(CrossCurrencySwap.class, new TypeSelector<CrossCurrencySwap>() {
                    @Override
                    public Class<? extends CrossCurrencySwap> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("CrossCurrencySwap", CrossCurrencySwap.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(DiscountFactorCurveData.class, new TypeSelector<DiscountFactorCurveData>() {
                    @Override
                    public Class<? extends DiscountFactorCurveData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("DiscountFactorCurveData", DiscountFactorCurveData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(EquityOption.class, new TypeSelector<EquityOption>() {
                    @Override
                    public Class<? extends EquityOption> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EquityOption", EquityOption.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(EquitySwap.class, new TypeSelector<EquitySwap>() {
                    @Override
                    public Class<? extends EquitySwap> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EquitySwap", EquitySwap.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(EquityVolSurfaceData.class, new TypeSelector<EquityVolSurfaceData>() {
                    @Override
                    public Class<? extends EquityVolSurfaceData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EquityVolSurfaceData", EquityVolSurfaceData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(ExoticInstrument.class, new TypeSelector<ExoticInstrument>() {
                    @Override
                    public Class<? extends ExoticInstrument> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ExoticInstrument", ExoticInstrument.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FixedLeg.class, new TypeSelector<FixedLeg>() {
                    @Override
                    public Class<? extends FixedLeg> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FixedLeg", FixedLeg.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FloatingLeg.class, new TypeSelector<FloatingLeg>() {
                    @Override
                    public Class<? extends FloatingLeg> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FloatingLeg", FloatingLeg.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(ForwardRateAgreement.class, new TypeSelector<ForwardRateAgreement>() {
                    @Override
                    public Class<? extends ForwardRateAgreement> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ForwardRateAgreement", ForwardRateAgreement.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FundingLeg.class, new TypeSelector<FundingLeg>() {
                    @Override
                    public Class<? extends FundingLeg> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FundingLeg", FundingLeg.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(Future.class, new TypeSelector<Future>() {
                    @Override
                    public Class<? extends Future> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Future", Future.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FxForward.class, new TypeSelector<FxForward>() {
                    @Override
                    public Class<? extends FxForward> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FxForward", FxForward.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FxOption.class, new TypeSelector<FxOption>() {
                    @Override
                    public Class<? extends FxOption> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FxOption", FxOption.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FxSwap.class, new TypeSelector<FxSwap>() {
                    @Override
                    public Class<? extends FxSwap> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FxSwap", FxSwap.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(FxVolSurfaceData.class, new TypeSelector<FxVolSurfaceData>() {
                    @Override
                    public Class<? extends FxVolSurfaceData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FxVolSurfaceData", FxVolSurfaceData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(InstrumentLeg.class, new TypeSelector<InstrumentLeg>() {
                    @Override
                    public Class<? extends InstrumentLeg> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("FixedLeg", FixedLeg.class);
                        classByDiscriminatorValue.put("FloatingLeg", FloatingLeg.class);
                        classByDiscriminatorValue.put("FundingLeg", FundingLeg.class);
                        classByDiscriminatorValue.put("InstrumentLeg", InstrumentLeg.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(InterestRateSwap.class, new TypeSelector<InterestRateSwap>() {
                    @Override
                    public Class<? extends InterestRateSwap> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("InterestRateSwap", InterestRateSwap.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(InterestRateSwaption.class, new TypeSelector<InterestRateSwaption>() {
                    @Override
                    public Class<? extends InterestRateSwaption> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("InterestRateSwaption", InterestRateSwaption.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(IrVolCubeData.class, new TypeSelector<IrVolCubeData>() {
                    @Override
                    public Class<? extends IrVolCubeData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("IrVolCubeData", IrVolCubeData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(LusidInstrument.class, new TypeSelector<LusidInstrument>() {
                    @Override
                    public Class<? extends LusidInstrument> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Basket", Basket.class);
                        classByDiscriminatorValue.put("Bond", Bond.class);
                        classByDiscriminatorValue.put("CashPerpetual", CashPerpetual.class);
                        classByDiscriminatorValue.put("CdsIndex", CdsIndex.class);
                        classByDiscriminatorValue.put("ContractForDifference", ContractForDifference.class);
                        classByDiscriminatorValue.put("CreditDefaultSwap", CreditDefaultSwap.class);
                        classByDiscriminatorValue.put("CrossCurrencySwap", CrossCurrencySwap.class);
                        classByDiscriminatorValue.put("EquityOption", EquityOption.class);
                        classByDiscriminatorValue.put("EquitySwap", EquitySwap.class);
                        classByDiscriminatorValue.put("ExoticInstrument", ExoticInstrument.class);
                        classByDiscriminatorValue.put("FixedLeg", FixedLeg.class);
                        classByDiscriminatorValue.put("FloatingLeg", FloatingLeg.class);
                        classByDiscriminatorValue.put("ForwardRateAgreement", ForwardRateAgreement.class);
                        classByDiscriminatorValue.put("FundingLeg", FundingLeg.class);
                        classByDiscriminatorValue.put("Future", Future.class);
                        classByDiscriminatorValue.put("FxForward", FxForward.class);
                        classByDiscriminatorValue.put("FxOption", FxOption.class);
                        classByDiscriminatorValue.put("FxSwap", FxSwap.class);
                        classByDiscriminatorValue.put("InstrumentLeg", InstrumentLeg.class);
                        classByDiscriminatorValue.put("InterestRateSwap", InterestRateSwap.class);
                        classByDiscriminatorValue.put("InterestRateSwaption", InterestRateSwaption.class);
                        classByDiscriminatorValue.put("Repo", Repo.class);
                        classByDiscriminatorValue.put("SimpleInstrument", SimpleInstrument.class);
                        classByDiscriminatorValue.put("TermDeposit", TermDeposit.class);
                        classByDiscriminatorValue.put("LusidInstrument", LusidInstrument.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(OpaqueMarketData.class, new TypeSelector<OpaqueMarketData>() {
                    @Override
                    public Class<? extends OpaqueMarketData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("OpaqueMarketData", OpaqueMarketData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
                .registerTypeSelector(Repo.class, new TypeSelector<Repo>() {
                    @Override
                    public Class<? extends Repo> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Repo", Repo.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(SimpleInstrument.class, new TypeSelector<SimpleInstrument>() {
                    @Override
                    public Class<? extends SimpleInstrument> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SimpleInstrument", SimpleInstrument.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(TermDeposit.class, new TypeSelector<TermDeposit>() {
                    @Override
                    public Class<? extends TermDeposit> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("TermDeposit", TermDeposit.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "instrumentType"));
                    }
          })
                .registerTypeSelector(YieldCurveData.class, new TypeSelector<YieldCurveData>() {
                    @Override
                    public Class<? extends YieldCurveData> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("YieldCurveData", YieldCurveData.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "marketDataType"));
                    }
          })
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    public JSON() {
        gson = createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     * @return JSON
     */
    public JSON setGson(Gson gson) {
        this.gson = gson;
        return this;
    }

    public JSON setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
        return this;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public JSON setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
        return this;
    }

    public JSON setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
        return this;
    }

}
