/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.InlineValuationsReconciliationRequest;
import com.finbourne.lusid.model.ListAggregationReconciliation;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import com.finbourne.lusid.model.PortfoliosReconciliationRequest;
import com.finbourne.lusid.model.PortfoliosReconciliationRequestPreview;
import com.finbourne.lusid.model.ResourceListOfReconciliationBreak;
import com.finbourne.lusid.model.ValuationsReconciliationRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReconciliationsApi
 */
@Ignore
public class ReconciliationsApiTest {

    private final ReconciliationsApi api = new ReconciliationsApi();

    
    /**
     * [EARLY ACCESS] Reconcile portfolio holdings
     *
     * Reconcile the holdings of two portfolios.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reconcileHoldingsTest() throws ApiException {
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        PortfoliosReconciliationRequest portfoliosReconciliationRequest = null;
        ResourceListOfReconciliationBreak response = api.reconcileHoldings(sortBy, start, limit, filter, portfoliosReconciliationRequest);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Reconcile portfolio holdings with given tolerance
     *
     * Reconcile the holdings of two portfolios.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reconcileHoldingsPreviewTest() throws ApiException {
        List<String> sortBy = null;
        Integer start = null;
        Integer limit = null;
        String filter = null;
        PortfoliosReconciliationRequestPreview portfoliosReconciliationRequestPreview = null;
        ResourceListOfReconciliationBreak response = api.reconcileHoldingsPreview(sortBy, start, limit, filter, portfoliosReconciliationRequestPreview);

        // TODO: test validations
    }
    
    /**
     * [BETA] Reconcile valuations performed on one or two sets of inline instruments using one or two configuration recipes.
     *
     * Perform valuation of one or two set of inline instruments using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reconcileInlineTest() throws ApiException {
        InlineValuationsReconciliationRequest inlineValuationsReconciliationRequest = null;
        ListAggregationReconciliation response = api.reconcileInline(inlineValuationsReconciliationRequest);

        // TODO: test validations
    }
    
    /**
     * [BETA] Reconcile valuations performed on one or two sets of holdings using one or two configuration recipes.
     *
     * Perform valuation of one or two set of holdings using different one or two configuration recipes. Produce a breakdown of the resulting differences in valuation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reconcileValuationTest() throws ApiException {
        ValuationsReconciliationRequest valuationsReconciliationRequest = null;
        ListAggregationReconciliation response = api.reconcileValuation(valuationsReconciliationRequest);

        // TODO: test validations
    }
    
}
