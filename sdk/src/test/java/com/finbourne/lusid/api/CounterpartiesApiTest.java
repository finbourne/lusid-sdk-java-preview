/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetCounterpartyAgreementResponse;
import com.finbourne.lusid.model.GetCreditSupportAnnexResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetCounterpartyAgreementResponse;
import com.finbourne.lusid.model.ResourceListOfGetCreditSupportAnnexResponse;
import com.finbourne.lusid.model.UpsertCounterpartyAgreementRequest;
import com.finbourne.lusid.model.UpsertCreditSupportAnnexRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CounterpartiesApi
 */
@Ignore
public class CounterpartiesApiTest {

    private final CounterpartiesApi api = new CounterpartiesApi();

    
    /**
     * [EXPERIMENTAL] Delete the Counterparty Agreement of given scope and code
     *
     * Delete the specified Counterparty Agreement from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCounterpartyAgreementTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteCounterpartyAgreement(scope, code);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Delete the Credit Support Annex of given scope and code
     *
     * Delete the specified Credit Support Annex from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCreditSupportAnnexTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteCreditSupportAnnex(scope, code);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Counterparty Agreement
     *
     * Get a Counterparty Agreement from a single scope.  The response will return either the Counterparty Agreement that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCounterpartyAgreementTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetCounterpartyAgreementResponse response = api.getCounterpartyAgreement(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Credit Support Annex
     *
     * Get a Credit Support Annex from a single scope.  The response will return either the Credit Support Annex that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCreditSupportAnnexTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetCreditSupportAnnexResponse response = api.getCreditSupportAnnex(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] List the set of Counterparty Agreements
     *
     * List the set of Counterparty Agreements at the specified AsAt date/time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCounterpartyAgreementsTest() throws ApiException {
        OffsetDateTime asAt = null;
        ResourceListOfGetCounterpartyAgreementResponse response = api.listCounterpartyAgreements(asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] List the set of Credit Support Annexes
     *
     * List the set of Credit Support Annexes at the specified AsAt date/time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCreditSupportAnnexesTest() throws ApiException {
        OffsetDateTime asAt = null;
        ResourceListOfGetCreditSupportAnnexResponse response = api.listCreditSupportAnnexes(asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert Counterparty Agreement
     *
     * Update or insert Counterparty Agreement in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Counterparty Agreement or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertCounterpartyAgreementTest() throws ApiException {
        UpsertCounterpartyAgreementRequest upsertCounterpartyAgreementRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertCounterpartyAgreement(upsertCounterpartyAgreementRequest);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert Credit Support Annex
     *
     * Update or insert Credit Support Annex in a single scope. An item will be updated if it already exists and inserted if it does not.                The response will return the successfully updated or inserted Credit Support Annex or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertCreditSupportAnnexTest() throws ApiException {
        UpsertCreditSupportAnnexRequest upsertCreditSupportAnnexRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertCreditSupportAnnex(upsertCreditSupportAnnexRequest);

        // TODO: test validations
    }
    
}
