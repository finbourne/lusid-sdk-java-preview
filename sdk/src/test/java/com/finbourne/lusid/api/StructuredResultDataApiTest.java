/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AnnulStructuredDataResponse;
import com.finbourne.lusid.model.CreateDataMapRequest;
import com.finbourne.lusid.model.DataMapKey;
import com.finbourne.lusid.model.GetDataMapResponse;
import com.finbourne.lusid.model.GetStructuredResultDataResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.StructuredResultDataId;
import com.finbourne.lusid.model.UpsertStructuredDataResponse;
import com.finbourne.lusid.model.UpsertStructuredResultDataRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StructuredResultDataApi
 */
@Ignore
public class StructuredResultDataApiTest {

    private final StructuredResultDataApi api = new StructuredResultDataApi();

    
    /**
     * [EXPERIMENTAL] Create data map
     *
     * Create or update one or more structured result store address definition data maps in a particular scope. Note these are immutable and cannot be changed once created.                In the request, each data map must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.  It serves only to easily identify each data map object in the response.                The response returns both the collection of successfully created or updated data maps, as well as those that failed.  For each failure, a reason is provided.                It is important to check the failed set for any unsuccessful results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDataMapTest() throws ApiException {
        String scope = null;
        Map<String, CreateDataMapRequest> requestBody = null;
        UpsertStructuredDataResponse response = api.createDataMap(scope, requestBody);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Delete structured result data
     *
     * Delete one or more structured result data items from a particular scope. Each item is identified by a unique ID which includes  information about its type as well as the exact effective datetime (to the microsecond) at which it entered the system (became valid).                In the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.  It serves only to easily identify each data item in the response.                The response returns both the collection of successfully deleted data items, as well as those that failed.  For each failure, a reason is provided.                It is important to check the failed set for any unsuccessful results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStructuredResultDataTest() throws ApiException {
        String scope = null;
        Map<String, StructuredResultDataId> requestBody = null;
        AnnulStructuredDataResponse response = api.deleteStructuredResultData(scope, requestBody);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get data map
     *
     * Retrieve one or more structured result store address definition data maps from a particular scope.                Each data map can be identified by its invariant key, which can be thought of as a permanent URL.  For each ID, LUSID returns the most recently matched item.                In the request, each data map must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.  It serves only to easily identify each data map in the response.                The response returns three collections. The first contains successfully retrieved data maps. The second contains those with a  valid identifier but that could not be found. The third contains those that failed because LUSID could not construct a valid identifier from the request.                For the IDs that failed to resolve or could not be found, a reason is provided.                It is important to check the failed sets for any unsuccessful results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDataMapTest() throws ApiException {
        String scope = null;
        Map<String, DataMapKey> requestBody = null;
        GetDataMapResponse response = api.getDataMap(scope, requestBody);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get structured result data
     *
     * Retrieve one or more structured result data items from a particular scope.                Each item can be identified by its time invariant structured result data identifier. For each ID, LUSID  returns the most recently matched item with respect to the provided (or default) effective datetime.                 An optional maximum age range window can be specified to control how far back to look from the specified  effective datetime. LUSID returns the most recent item within this window.                In the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.  It serves only to easily identify each data item in the response.    The response returns three collections. The first contains successfully retrieved data items. The second contains those with a  valid identifier but that could not be found. The third contains those that failed because LUSID could not construct a valid identifier from the request.    For the IDs that failed to resolve or could not be found, a reason is provided.                It is important to check the failed sets for any unsuccessful results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStructuredResultDataTest() throws ApiException {
        String scope = null;
        Map<String, StructuredResultDataId> requestBody = null;
        OffsetDateTime asAt = null;
        String maxAge = null;
        GetStructuredResultDataResponse response = api.getStructuredResultData(scope, requestBody, asAt, maxAge);

        // TODO: test validations
    }
    
    /**
     * [BETA] Upsert structured result data
     *
     * Create or update one or more structured result data items in a particular scope. An item is updated if it already exists  and created if it does not.                In the request, each data item must be keyed by a unique correlation ID. This ID is ephemeral and not stored by LUSID.  It serves only to easily identify each data item in the response.                The response returns both the collection of successfully created or updated data items, as well as those that failed.  For each failure, a reason is provided.                It is important to check the failed set for any unsuccessful results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertStructuredResultDataTest() throws ApiException {
        String scope = null;
        Map<String, UpsertStructuredResultDataRequest> requestBody = null;
        UpsertStructuredDataResponse response = api.upsertStructuredResultData(scope, requestBody);

        // TODO: test validations
    }
    
}
