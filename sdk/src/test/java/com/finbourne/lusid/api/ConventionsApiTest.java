/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetCdsFlowConventionsResponse;
import com.finbourne.lusid.model.GetFlowConventionsResponse;
import com.finbourne.lusid.model.GetIndexConventionResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetCdsFlowConventionsResponse;
import com.finbourne.lusid.model.ResourceListOfGetFlowConventionsResponse;
import com.finbourne.lusid.model.ResourceListOfGetIndexConventionResponse;
import com.finbourne.lusid.model.UpsertCdsFlowConventionsRequest;
import com.finbourne.lusid.model.UpsertFlowConventionsRequest;
import com.finbourne.lusid.model.UpsertIndexConventionRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConventionsApi
 */
@Ignore
public class ConventionsApiTest {

    private final ConventionsApi api = new ConventionsApi();

    
    /**
     * [BETA] Delete the CDS Flow Conventions of given scope and code, assuming that it is present.
     *
     * Delete the specified CDS Flow Conventions from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.  It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCdsFlowConventionsTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteCdsFlowConventions(scope, code);

        // TODO: test validations
    }
    
    /**
     * [BETA] Delete the Flow Conventions of given scope and code, assuming that it is present.
     *
     * Delete the specified conventions from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.  It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFlowConventionsTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteFlowConventions(scope, code);

        // TODO: test validations
    }
    
    /**
     * [BETA] Delete the Index Convention of given scope and code, assuming that it is present.
     *
     * Delete the specified Index Convention from a single scope.  The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.  It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIndexConventionTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteIndexConvention(scope, code);

        // TODO: test validations
    }
    
    /**
     * [BETA] Get CDS Flow Conventions
     *
     * Get a CDS Flow Conventions from a single scope.  The response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCdsFlowConventionsTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetCdsFlowConventionsResponse response = api.getCdsFlowConventions(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] Get Flow Conventions
     *
     * Get a Flow Conventions from a single scope.  The response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFlowConventionsTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetFlowConventionsResponse response = api.getFlowConventions(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] Get Index Convention
     *
     * Get a Index Convention from a single scope.  The response will return either the conventions that has been stored, or a failure explaining why the request was unsuccessful.  It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIndexConventionTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetIndexConventionResponse response = api.getIndexConvention(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] List the set of CDS Flow Conventions
     *
     * List the set of CDS Flow Conventions at the specified date/time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCdsFlowConventionsTest() throws ApiException {
        OffsetDateTime asAt = null;
        ResourceListOfGetCdsFlowConventionsResponse response = api.listCdsFlowConventions(asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] List the set of Flow Conventions
     *
     * List the set of Flow Conventions at the specified date/time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFlowConventionsTest() throws ApiException {
        OffsetDateTime asAt = null;
        ResourceListOfGetFlowConventionsResponse response = api.listFlowConventions(asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] List the set of Index Conventions
     *
     * List the set of Index Conventions at the specified date/time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIndexConventionTest() throws ApiException {
        OffsetDateTime asAt = null;
        ResourceListOfGetIndexConventionResponse response = api.listIndexConvention(asAt);

        // TODO: test validations
    }
    
    /**
     * [BETA] Upsert a set of CDS Flow Conventions. This creates or updates the data in Lusid.
     *
     * Update or insert CDS Flow Conventions in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted CDS Flow Conventions or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertCdsFlowConventionsTest() throws ApiException {
        UpsertCdsFlowConventionsRequest upsertCdsFlowConventionsRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertCdsFlowConventions(upsertCdsFlowConventionsRequest);

        // TODO: test validations
    }
    
    /**
     * [BETA] Upsert Flow Conventions. This creates or updates the data in Lusid.
     *
     * Update or insert Flow Conventions in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Flow Conventions or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertFlowConventionsTest() throws ApiException {
        UpsertFlowConventionsRequest upsertFlowConventionsRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertFlowConventions(upsertFlowConventionsRequest);

        // TODO: test validations
    }
    
    /**
     * [BETA] Upsert a set of Index Convention. This creates or updates the data in Lusid.
     *
     * Update or insert Index Convention in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Index Convention or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertIndexConventionTest() throws ApiException {
        UpsertIndexConventionRequest upsertIndexConventionRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertIndexConvention(upsertIndexConventionRequest);

        // TODO: test validations
    }
    
}
