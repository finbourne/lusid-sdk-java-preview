/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.api;

import com.finbourne.lusid.ApiException;
import com.finbourne.lusid.model.AnnulSingleStructuredDataResponse;
import com.finbourne.lusid.model.GetRecipeResponse;
import com.finbourne.lusid.model.LusidProblemDetails;
import com.finbourne.lusid.model.LusidValidationProblemDetails;
import java.time.OffsetDateTime;
import com.finbourne.lusid.model.ResourceListOfGetRecipeResponse;
import com.finbourne.lusid.model.UpsertRecipeRequest;
import com.finbourne.lusid.model.UpsertSingleStructuredDataResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigurationRecipeApi
 */
@Ignore
public class ConfigurationRecipeApiTest {

    private final ConfigurationRecipeApi api = new ConfigurationRecipeApi();

    
    /**
     * [EXPERIMENTAL] Delete a Configuration Recipe, assuming that it is present.
     *
     * Delete the specified Configuration Recipe from a single scope.                The response will return either detail of the deleted item, or an explanation (failure) as to why this did not succeed.                It is important to always check for any unsuccessful response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigurationRecipeTest() throws ApiException {
        String scope = null;
        String code = null;
        AnnulSingleStructuredDataResponse response = api.deleteConfigurationRecipe(scope, code);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Get Configuration Recipe
     *
     * Get a Configuration Recipe from a single scope.                The response will return either the recipe that has been stored, or a failure explaining why the request was unsuccessful.                It is important to always check for any unsuccessful requests (failures).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigurationRecipeTest() throws ApiException {
        String scope = null;
        String code = null;
        OffsetDateTime asAt = null;
        GetRecipeResponse response = api.getConfigurationRecipe(scope, code, asAt);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] List the set of Configuration Recipes
     *
     * List the set of configuration recipes at the specified date/time and scope
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listConfigurationRecipesTest() throws ApiException {
        OffsetDateTime asAt = null;
        String filter = null;
        ResourceListOfGetRecipeResponse response = api.listConfigurationRecipes(asAt, filter);

        // TODO: test validations
    }
    
    /**
     * [EXPERIMENTAL] Upsert a Configuration Recipe. This creates or updates the data in Lusid.
     *
     * Update or insert one Configuration Recipe in a single scope. An item will be updated if it already exists  and inserted if it does not.                The response will return the successfully updated or inserted Configuration Recipe or failure message if unsuccessful                It is important to always check to verify success (or failure).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upsertConfigurationRecipeTest() throws ApiException {
        UpsertRecipeRequest upsertRecipeRequest = null;
        UpsertSingleStructuredDataResponse response = api.upsertConfigurationRecipe(upsertRecipeRequest);

        // TODO: test validations
    }
    
}
